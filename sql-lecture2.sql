-- მონაცემთა წამოსაღებად ვიყენებთ SELCET ბრძანებას > შემდეგ ვუწერთ იმ სვეტების დასახელებას რომლიდანაც გვინდა ინფორმაციის წამოღება ან > 
-- ვუწერთ *ფიფქს რომლითაც ყველა სვეტზე განვახორციელებთ წვდომას 
-- SELECT * FROM CAR ORDER BY price
-- დეფაულტად მონაცემებს ალაგებს იმის მიხედვით თუკი რომელი მონაცემი როდის შეიქმნა, მაგრამ შეგვიძლია რიგითობა შევცვალოთ, რისთვისაც ვიყენებთ 
-- ORDER BY ბრძანებას
-- ASC არის რიგითობის მიხედვით დაბლიდან მაღლა 
-- ასევე გვაქ DESC რომელცის პირიქით, მაღლიდან დაბლა დაალაგებს რიგითობას

-- ####################################
-- !!!!SELECT * FROM CAR ORDER BY price, covered_distance
-- მაგ: თუკი ორ მონაცემს აქვს საერთო ფასი, შეგვიძლია მეორე ლოგიკაც ჩავურთოთ რომლის მიხედვითაც დაალაგებს იმ ნომაცემებს რომელთაც აქვთ რაღაც საერთო
-- ამისათვის კი ORDER BY-ს შემდეგ უნდა დავუწეროთ იმ სვეტის დასახელებაც რომლითაც ვალადებთ
-- რომელ სვეტსაც პირველი გავუწერთ, იმის მიხედვით ექნება სვეტებს უპირატესობა
-- ####################################

-- !!!!SELECT brand as manqana, model FROM CAR
-- თუკი სვერტის შემდეგ გავუწერთ as ბრძანებას, რომელსაც გადაეცემა რაღაც სახელი, ამ სვეტს წამოიღებს და შეცვლის დასახელებას  

-- ####################################
--!!!! SELECT * FROM CAR LIMIT 2;
-- LIMIT n წამოიღებს იმ რაოდენობის მონაცემებს რამდენსაც nში ციფრს გადავცემთ 

-- ####################################
-- შეგვიძლია ერთმანეთშიც ავურიოთ და ისე გავფილტროთ მონაცემები
--!!!! SELECT * FROM CAR ORDER BY MODEL desc limit 3

-- ####################################
-- where ბრძანება ფილტრავს მონაცემებს იმ ლოგიკის მიხედვით რომელსაც გადავცემთ where ბრძანების შემდეგ
--!!!! SELECT * FROM CAR where brand = 'AUDI' or 'BMW'
-- წამოიღე ონაცემები სადაც brandში გვაქ AUDI ან BMW
-- or არის ან ოპერატორი
-- აგრეთვე გავქ and='და' ოპერატორი
--!!!! SELECT * FROM CAR where brand = 'AUDI' and MODEL = 'R8'
--!!!! SELECT * FROM CAR where price > 5000 and price < 15000

-- #####################################
-- IN ბრძანება
--!!!! SELECT * FROM CAR WHERE brand IN ('BMW', 'mercedes', 'AUDI');

-- #####################################
-- შედარებითაც შეგვიძლია წამოვიღოთ მონაცემი, რაღაც ლოგიკას შევადაროთ და იმის მიხედვით გავფილტროთ
--!!!! select * from car where price > 5000 and price < 20000
-- BETWEEN ბრძანება, გულისხმობს შედარების ოპერატორი განახორციელებს წვდომას გადაცემულ ციფრებს შორის წვდომას
-- მსგავსად range ისა 
--!!!! select * from car where price between 4000 and 20000

-- მონაცემის ასოებით წამოღება
-- LIKE ბრძანება და ILIKE ბრძანება
--!!!! select * from car where model like('M%')
-- likeს გადაეცემა ბრძანება რომლის მიხედვითაც გაფილტრავს მონაცემებს
-- თუ გინდა რომ ისეთი მონაცემი წამოვიღთ რომელიც იწეყბა რაღაც ასოზე უნდა გადავცეთ ეს ასო და გვერზე მივუწეროთ % პროცენტის ნიშანი
--!!!! select * from car where vincode like('%C%')
-- თუკი პროცენტის ნიშნების შუაში მოვაქცევთ გადაცემულ ასოს, 
-- მთლიან მონაცემის დასახელებაში დაივლის თუ ის დასახელება თუ შედგება ამ ასოსგან, დაძებნის და წამოიღებს
--!!!! select * from car where brand like('___')
-- შეგვიძლია გადაცვეთ ისიც თუკი რამდენი ასოსგან შედგება დასახელება, იმდენი ქვედა ტირე უნდა გადავცეთ, 
--!!!! select * from car where brand like('A___') 
-- ან შეგვძლია ასო ჩავსვათ და იმ დასახელებით წამოიღებს რაც შეხბდევა 
-- რომელის პირველი ასოც არის A ასო და შედგება 4 ასოსგან ჯამში, აგრეთვე შეგვიძლია ამ ბრძანებებ ის ერთმანეთში არევაც

-- like ისგან განსხვავებით ilike ბრძანებას თუ გადავცემთ დიდ და პატარა ასებს არ აქვს მისთვის მნიშვნელობა

-- ###########################################################################################################################################
-- update მონაცემის განახლება
-- update ბრძანებით,ვაკეთებთ მონაცემების განახლებას, ბრძანების შემდეგ ვწერთ ცხრილის დასახებელას და set ბრძანებას, 
-- set ბრძანებას კი უნდა დავუწეროთ იმ სვეტის დასახელება რომელის განახლებაც გვინდა     
-- UPDATE car SET description = 'left wheel' returning *
-- returning * გამოგივტანს განახლებულ სვეტს, თან გაანახლებს და და ჩვენც გამოგვიტანს ვიზუალურად

-- ###################################
-- update car set price = price * 1.1  returning * 
-- price გავზარდეთ 10%ით

-- ###################################
-- გავფილტროთ და ისე განვაახლოთ ჩვენი მონაცემები, კონკრეტული დავასელექტოთ და იმის მონაცემი შევცვალოთ
-- update car set is_car_levied = true where brand = 'BMW' returning *
-- ჯერ ვაკეთებთ განახლებას და შემდეგ დასელექტებას where ბრძანებით

-- ###################################
-- ყველა brandის დასახელება აიყანა მაღა რეესტრში
-- update car set brand = upper(brand) returning *

-- ###################################
-- ორი მონაცემის ცხრილი შეცვალა და აიყვანა მაღალ რეესტში
-- update car set model = upper(model), brand = upper(brand) returning *

-- ###################################
-- ორი სტრინგის გასაერთიანებლად გამოიყენება || ორი სწორი ხაზი
-- update car set model = model || ' CDI' where model like('G%') 
-- || დასახელებას დაემატება ორი ხაზის შე,დეგ გადაცემული სიმბოლოები

-- ###################################
-- REPLACE ბრძანება გადაეცემა 3 ბრძანება:
-- 1 რომელი ცხრილი უნდა შევცვალოთ
-- 2 დასახელება რომელიც უნდა შევცვალოთ
-- 3 ახალი დასახელება
-- update car set model = REPLACE(model, 'R8', 'A8') where brand ilike('A%') returning *
-- მაგრამ boolean ან integer ტიპის მონაცემეს ვერ შევცვლით, მხოლოდ varchar ან text ტიპის მონაცემის შეცვლა შეგვიძლია


-- ###########################################################################################################################################
-- alter ბრძანებით შეგვიძლია ცხრილის წაშლა ან ახალი ცხრილის ჩამატება
-- alter table car add column fuel_type varchar
-- update car set fuel_type = 'gasoline' where price between 2000 and 10000
-- update car set fuel_type = 'hybrid' where production_year >= 2018 
-- update  car set fuel_type = 'diesel' where model like('%CDI%') returning *

-- ####################################
-- alter drop ბრძანებთ შეგვიძლია ცხრილის წაშლა
-- alter table car drop column fuel_type

-- ####################################
-- alter ბრძანებით შეგვიძლია მონაცემის ტიპის შეცვლაც ცხრილში
-- alter tabkle name > alter column name > type > type name
-- alter table car alter column price type int
-- price მონაცემი გადავაქციეთ ინტეგერად, მთელ რიცხვად
-- alter table car alter column price type numeric(8, 2)
-- უკეთესი თვალსაჩინოებისათვის დავაბრუნეთ ათწილადად




-- ###########################################################################################################################################
-- -- delete ბრძანება, შეგვიძლია ცხრილების და მონაცემების წაშლა
-- delete from car where model ilike('cl_') returning *


-- truncate table car --წაშლის მთლიანი ცხრილის მხოლოდ მონაცემებს, ცხრილი გასუფთავდება, 
-- აგრეთვე ცხრილის id ათვლას დაიწყებს იმ ადილიდან რომელიც წაშლამდე იყო, ანუ id არ დარესეტდება, ჩვეულებრივ გაააგრძელებს მუშაობას.0








-- INSERT INTO CAR (brand, model, production_year, vincode, engine, covered_distance, is_car_levied, price, is_active, fuel_type) values
-- 	('mercedes', 'cls', 2019, 'vbce324314132414', 3.5, 12300, true, 19800, true, 'gasoline'),
-- 	('mercedes', 'GLE', 2016, 'VH23213414341', 4.5, 4500, true, 12300, true, 'deisel'),
-- 	('BMW', 'M5', 2018, 'VRCM214134134E', 2.8, 12000, false, 12340, false, 'gasoline'),
-- 	('AUDI', 'R8', 2024, 'VNCM3143531323', 2.4, 12050, true, 28000, false, 'hybrid'),
-- 	('volkswagen', 'touran', 2012, 'vbn3413413144311', 2.0, 300000, false, 5000, true, 'diesel'),
-- 	('honda', 'fit', 2006, 'rvdc13413413414', 1.6, 200000, true, 3500, true, 'gasoline')

